#!/usr/bin/python
# -*- coding: utf-8 -*-
# 全排列2
class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        def backtrack(first):
            if first == n:
                res.append(nums[:])
            for i in range(first, n):
                if i != first and (nums[first] == nums[i] or nums[i] == nums[i-1]):
                    continue
                nums[i], nums[first] = nums[first], nums[i]
                backtrack(first+1)
                nums[i], nums[first] = nums[first], nums[i]

        res = []
        n = len(nums)
        nums.sort()
        backtrack(0)
        return res

if __name__ == "__main__":
    a = Solution()
    print a.permuteUnique([-1,2,0,-1,1,0,1])

mine=[[0,0,1,1,2],[0,0,1,2,1],[0,0,2,1,1],[0,1,0,1,2],[0,1,0,2,1],[0,1,1,0,2],[0,1,1,2,0],[0,1,2,1,0],[0,1,2,0,1],[0,2,1,1,0],[0,2,1,0,1],[0,2,0,1,1],[1,0,0,1,2],[1,0,0,2,1],[1,0,1,0,2],[1,0,1,2,0],[1,0,2,1,0],[1,0,2,0,1],[1,1,0,0,2],[1,1,0,2,0],[1,1,2,0,0],[1,2,0,1,0],[1,2,0,0,1],[1,2,1,0,0],[2,0,1,1,0],[2,0,1,0,1],[2,0,0,1,1],[2,1,0,1,0],[2,1,0,0,1],[2,1,1,0,0]]
ans=[[0,0,1,1,2],[0,0,1,2,1],[0,0,2,1,1],[0,1,0,1,2],[0,1,0,2,1],[0,1,1,0,2],[0,1,1,2,0],[0,1,2,0,1],[0,1,2,1,0],[0,2,0,1,1],[0,2,1,0,1],[0,2,1,1,0],[1,0,0,1,2],[1,0,0,2,1],[1,0,1,0,2],[1,0,1,2,0],[1,0,2,0,1],[1,0,2,1,0],[1,1,0,0,2],[1,1,0,2,0],[1,1,2,0,0],[1,2,0,0,1],[1,2,0,1,0],[1,2,1,0,0],[2,0,0,1,1],[2,0,1,0,1],[2,0,1,1,0],[2,1,0,0,1],[2,1,0,1,0],[2,1,1,0,0]]

mine.sort()
ans.sort()
bool(mine == ans)